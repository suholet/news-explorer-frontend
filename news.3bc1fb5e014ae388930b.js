!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=127)}([function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e&&e)||Function("return this")()}).call(this,n(86))},function(t,e,n){var r=n(0),o=n(44),i=n(4),a=n(45),c=n(48),u=n(83),s=o("wks"),l=r.Symbol,f=u?l:l&&l.withoutSetter||a;t.exports=function(t){return i(s,t)||(c&&i(l,t)?s[t]=l[t]:s[t]=f("Symbol."+t)),s[t]}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r})),n.d(e,"d",(function(){return o})),n.d(e,"c",(function(){return i})),n.d(e,"b",(function(){return a}));var r={REQUIRED:"Это обязательное поле",LENGTH:"Должно быть от 2 до 30 символов",LENGTH_PASSWORD:"Должно быть от 8 до 30 символов",ALREADY_EXIST:"Такой пользователь уже есть",EMAIL_WRONG_FORMAT:"Неправильный формат email",INVALID_EMAIL:"Неправильный формат email",INCORRECT_LOGIN:"Неправильный email или пароль",NO_ARTICLE:"Запрашиваемая новость не найдена",NO_USER:"Запрашиваемый пользователь не найден",ACCESS_DENIED:"Только владелец карчки может ее удалять",UNATHORIZED:"Ошибка авторизации",INVALID_LINK:"Неправильный формат ссылки",NOT_FOUND:"Запрашиваемый ресурс не найден",DEFAULT:"Что-то пошло не так"},o={NOT_FOUND:"Ничего не найдено",EMPTY:"Ошибка",DEFAULT:"Во время запроса произошла ошибка"},i={NOT_FOUND:"К сожалению по вашему запросу ничего не найдено",EMPTY:"Нужно ввести ключевое слово",DEFAULT:"Возможно, проблема с соединением или сервер недоступен. Подождите немного и попробуйте ещё раз."},a={NOT_FOUND:"NOT_FOUND",EMPTY:"EMPTY",DEFAULT:"DEFAULT"}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(0),o=n(28).f,i=n(12),a=n(14),c=n(38),u=n(80),s=n(56);t.exports=function(t,e){var n,l,f,p,d,h=t.target,v=t.global,y=t.stat;if(n=v?r:y?r[h]||c(h,{}):(r[h]||{}).prototype)for(l in e){if(p=e[l],f=t.noTargetGet?(d=o(n,l))&&d.value:n[l],!s(v?l:h+(y?".":"#")+l,t.forced)&&void 0!==f){if(typeof p==typeof f)continue;u(p,f)}(t.sham||f&&f.sham)&&i(p,"sham",!0),a(n,l,p,t)}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(6);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e,n){var r=n(3);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e,n){var r=n(8),o=n(52),i=n(7),a=n(29),c=Object.defineProperty;e.f=r?c:function(t,e,n){if(i(t),e=a(e,!0),i(n),o)try{return c(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){"use strict";n(75),n(50),n(51);var r=n(11);function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,i;return e=t,(n=[{key:"_parseResponse",value:function(t){return t.ok?t.text().then((function(t){return t?JSON.parse(t):{}})):Promise.reject(t.json())}},{key:"signin",value:function(t,e){var n=this;return fetch("".concat(r.a.MAIN_URL,"/signin"),{credentials:"include",method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:t,password:e})}).then((function(t){return n._parseResponse(t)})).catch((function(t){throw t}))}},{key:"signup",value:function(t,e,n){var o=this;return fetch("".concat(r.a.MAIN_URL,"/signup"),{credentials:"include",method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:t,password:e,name:n})}).then((function(t){return o._parseResponse(t)})).catch((function(t){throw t}))}},{key:"getUserData",value:function(){var t=this;return fetch("".concat(r.a.MAIN_URL,"/users/me"),{credentials:"include",method:"GET"}).then((function(e){return t._parseResponse(e)})).catch((function(t){throw t}))}},{key:"getArticles",value:function(){var t=this;return fetch("".concat(r.a.MAIN_URL,"/articles"),{credentials:"include",method:"GET"}).then((function(e){return t._parseResponse(e)})).catch((function(t){throw t}))}},{key:"createArticle",value:function(t,e,n,o,i,a,c){var u=this;return fetch("".concat(r.a.MAIN_URL,"/articles"),{credentials:"include",method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({keyword:t,title:e,text:n,date:o,source:i,link:a,image:c})}).then((function(t){return u._parseResponse(t)})).catch((function(t){throw t}))}},{key:"removeArticle",value:function(t){var e=this;return fetch("".concat(r.a.MAIN_URL,"/articles/").concat(t),{credentials:"include",method:"DELETE"}).then((function(t){return e._parseResponse(t)})).catch((function(t){throw t}))}}])&&o(e.prototype,n),i&&o(e,i),t}();e.a=i},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var r={MAIN_URL1:"http://localhost:3000",MAIN_URL:"https://api.donesaur.com",NEWS_URL1:"http://newsapi.org/v2/",NEWS_URL:"https://praktikum.tk/news/v2/",NEWS_API_KEY:"55c8057fdc7b439fba225761533135f9",PAGE_SIZE:100}},function(t,e,n){var r=n(8),o=n(9),i=n(19);t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(0),o=n(12),i=n(4),a=n(38),c=n(39),u=n(30),s=u.get,l=u.enforce,f=String(String).split("String");(t.exports=function(t,e,n,c){var u=!!c&&!!c.unsafe,s=!!c&&!!c.enumerable,p=!!c&&!!c.noTargetGet;"function"==typeof n&&("string"!=typeof e||i(n,"name")||o(n,"name",e),l(n).source=f.join("string"==typeof e?e:"")),t!==r?(u?!p&&t[e]&&(s=!0):delete t[e],s?t[e]=n:o(t,e,n)):s?t[e]=n:a(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||c(this)}))},function(t,e,n){var r=n(81),o=n(0),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},function(t,e,n){var r=n(23);t.exports=function(t){return Object(r(t))}},function(t,e,n){var r=n(36),o=n(23);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(40),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){t.exports=!1},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e,n){"use strict";function r(){return null!=localStorage.getItem("props")&&JSON.parse(localStorage.getItem("props")).isLoggedIn}function o(){return null!=localStorage.getItem("props")&&JSON.parse(localStorage.getItem("props")).userName}n.d(e,"b",(function(){return r})),n.d(e,"a",(function(){return o}))},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,n){var r=n(21);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports={}},function(t,e,n){"use strict";n(27),n(92),n(84),n(50),n(51),n(105),n(33);var r=n(10),o=n(2),i="Вход",a="Регистрация",c="Пользователь успешно зарегистрирован!",u="Зарегистрироваться",s="Войти",l="signin",f="signup",p="signed";function d(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var h=function(){function t(e,n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._popup=r,this.isSignin=e,this._form=n,this._submitButton=this._form.querySelector(".popup__action-button"),this._setHandlers()}var e,n,i;return e=t,(n=[{key:"_setFormInputHanlers",value:function(t){Array.from(t.elements).forEach((function(t){"INPUT"===t.nodeName&&t.addEventListener("input",this._handleValidate.bind(this))}),this)}},{key:"_setHandlers",value:function(){this._setFormInputHanlers(this._form),this.isSignin?this._form.addEventListener("submit",this._login.bind(this)):this._form.addEventListener("submit",this._register.bind(this))}},{key:"_handleValidate",value:function(t){this._resetPopupError(),this._resetInputError(t.target),this._validateInputElement(t.target)}},{key:"_resetInputError",value:function(t){t.parentNode.classList.remove("popup__input-container_invalid"),t.textContent=""}},{key:"_resetPopupError",value:function(){var t=document.getElementById("error-signin-popup");t.textContent="",t.style.display="none";var e=document.getElementById("error-signup-popup");e.textContent="",e.style.display="none"}},{key:"_validateInputElement",value:function(t){var e=document.querySelector("#error-".concat(t.id));return t.validity.valueMissing?(e.textContent=o.a.REQUIRED,this._activateError(t),this._setSubmitButtonState(!0),!1):t.validity.tooShort||t.validity.tooLong?("password"===t.type?e.textContent=o.a.LENGTH_PASSWORD:e.textContent=o.a.LENGTH,this._activateError(t),this._setSubmitButtonState(!0),!1):t.validity.patternMismatch?(e.textContent=o.a.EMAIL_WRONG_FORMAT,this._activateError(t),this._setSubmitButtonState(!0),!1):this._allInputsValid()?(this._setSubmitButtonState(!1),!0):(this._setSubmitButtonState(!0),!1)}},{key:"_allInputsValid",value:function(){for(var t=Array.from(this._form.elements),e=0;e<t.length;e++)if("INPUT"===t[e].nodeName&&!t[e].validity.valid)return!1;return!0}},{key:"_setSubmitButtonState",value:function(t){this._submitButton=this.isSignin?document.forms.signin.querySelector(".popup__action-button"):document.forms.signup.querySelector(".popup__action-button"),this._submitButton.disabled=t}},{key:"_activateError",value:function(t){t.parentNode.classList.add("popup__input-container_invalid")}},{key:"_setAuthUserData",value:function(t){var e=this;Promise.resolve(t.getUserData()).then((function(t){var e={isLoggedIn:!0,userName:t[0].name};localStorage.setItem("props",JSON.stringify(e))})).catch((function(t){e._setSubmitButtonState(!0),e._setServerError(t)}))}},{key:"_login",value:function(t){var e=this;t.preventDefault();var n=new r.a,o=this._form.elements.email.value,i=this._form.elements.password.value;n.signin(o,i).then((function(t){n.getUserData().then((function(t){var n={isLoggedIn:!0,userName:t[0].name};localStorage.setItem("props",JSON.stringify(n)),e._popup.close()}))})).catch((function(t){e._setSubmitButtonState(!0),e._setServerError(t)}))}},{key:"_register",value:function(t){var e=this;t.preventDefault();var n=new r.a,o=this._form.elements.email.value,i=this._form.elements.password.value,a=this._form.elements.name.value;n.signup(o,i,a).then((function(t){e._popup.setContent(p)})).catch((function(t){e._setSubmitButtonState(!0),e._setServerError(t)}))}},{key:"_setServerError",value:function(t){var e=this;Promise.resolve(t).then((function(t){var n=e.isSignin?document.getElementById("error-signin-popup"):document.getElementById("error-signup-popup"),r=void 0===o.a[t.message]?o.a.DEFAULT:o.a[t.message];n.textContent=r,n.style.display="block"}))}},{key:"clear",value:function(){this._form=this.isSignin?document.forms.signin:document.forms.signup,this._form.reset(),this._setSubmitButtonState(!1),this._resetPopupError(),Array.from(this._form.elements).forEach((function(t){"INPUT"===t.nodeName&&t.parentNode.classList.remove("popup__input-container_invalid")}))}}])&&d(e.prototype,n),i&&d(e,i),t}();function v(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var y=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._element=document.querySelector(".popup"),this._state=l,this._setHandlers()}var e,n,r;return e=t,(n=[{key:"_setHandlers",value:function(){this._element.querySelector(".popup__close").addEventListener("click",this.close.bind(this)),document.addEventListener("keydown",function(t){"Escape"==t.key&&this.close()}.bind(this)),document.querySelector(".popup__action-link-button").addEventListener("click",this._switchFormState.bind(this)),document.getElementById("signed").addEventListener("click",this._switchFormState.bind(this))}},{key:"open",value:function(){this._form=new h(!0,document.forms.signin,this),this.setContent(this._state),this._element.classList.add("popup_is-opened")}},{key:"close",value:function(){this._element.classList.remove("popup_is-opened"),location.reload()}},{key:"_switchFormState",value:function(){this._state===l?(this._state=f,this._form=new h(!1,document.forms.signup,this)):(this._state=l,this._form=new h(!0,document.forms.signin,this)),this.setContent(this._state)}},{key:"setContent",value:function(t){switch(this._form.clear(),t){case f:document.getElementById("signin").style.display="none",document.getElementById("signup").style.display="inline",document.getElementById("signed").style.display="none",document.getElementById("or-button").style.display="block",document.querySelector(".popup__title").textContent=a,document.querySelector(".popup__action-link-button").textContent=s;break;case p:document.getElementById("signin").style.display="none",document.getElementById("signup").style.display="none",document.getElementById("signed").style.display="inline",document.getElementById("or-button").style.display="none",document.querySelector(".popup__title").textContent=c;break;default:document.getElementById("signin").style.display="inline",document.getElementById("signup").style.display="none",document.getElementById("signed").style.display="none",document.getElementById("or-button").style.display="block",document.querySelector(".popup__title").textContent=i,document.querySelector(".popup__action-link-button").textContent=u}}}])&&v(e.prototype,n),r&&v(e,r),t}();e.a=y},function(t,e,n){"use strict";var r=n(5),o=n(57);r({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},function(t,e,n){var r=n(8),o=n(79),i=n(19),a=n(17),c=n(29),u=n(4),s=n(52),l=Object.getOwnPropertyDescriptor;e.f=r?l:function(t,e){if(t=a(t),e=c(e,!0),s)try{return l(t,e)}catch(t){}if(u(t,e))return i(!o.f.call(t,e),t[e])}},function(t,e,n){var r=n(6);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r,o,i,a=n(87),c=n(0),u=n(6),s=n(12),l=n(4),f=n(31),p=n(32),d=c.WeakMap;if(a){var h=new d,v=h.get,y=h.has,m=h.set;r=function(t,e){return m.call(h,t,e),e},o=function(t){return v.call(h,t)||{}},i=function(t){return y.call(h,t)}}else{var _=f("state");p[_]=!0,r=function(t,e){return s(t,_,e),e},o=function(t){return l(t,_)?t[_]:{}},i=function(t){return l(t,_)}}t.exports={set:r,get:o,has:i,enforce:function(t){return i(t)?o(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!u(e)||(n=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},function(t,e,n){var r=n(44),o=n(45),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,e){t.exports={}},function(t,e,n){var r=n(0),o=n(91),i=n(57),a=n(12);for(var c in o){var u=r[c],s=u&&u.prototype;if(s&&s.forEach!==i)try{a(s,"forEach",i)}catch(t){s.forEach=i}}},function(t,e,n){var r=n(9).f,o=n(4),i=n(1)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){"use strict";n.d(e,"b",(function(){return o})),n.d(e,"c",(function(){return i})),n.d(e,"a",(function(){return a}));n(116);function r(t){var e=new Date(t),n=""+(e.getMonth()+1),r=""+e.getDate(),o=e.getFullYear();return n.length<2&&(n="0"+n),r.length<2&&(r="0"+r),[o,n,r].join("-")}function o(){return r(new Date)}function i(){var t=new Date;return t.setDate(t.getDate()-7),r(t)}function a(t){var e=new Date(t),n=""+(e.getMonth()+1),r=""+e.getDate(),o=e.getFullYear();switch(n){case"1":n="января,";break;case"2":n="февраля,";break;case"3":n="марта,";break;case"4":n="апреля,";break;case"5":n="мая,";break;case"6":n="июня,";break;case"7":n="июля,";break;case"8":n="августа,";break;case"9":n="сентября,";break;case"10":n="октября,";break;case"11":n="ноября,";break;case"12":n="декабря,"}return r.length<2&&(r="0"+r),[r,n,o].join(" ")}},function(t,e,n){var r=n(3),o=n(13),i="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,e,n){var r=n(0),o=n(6),i=r.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},function(t,e,n){var r=n(0),o=n(12);t.exports=function(t,e){try{o(r,t,e)}catch(n){r[t]=e}return e}},function(t,e,n){var r=n(53),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return o.call(t)}),t.exports=r.inspectSource},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,n){var r={};r[n(1)("toStringTag")]="z",t.exports="[object z]"===String(r)},function(t,e,n){var r,o,i=n(0),a=n(69),c=i.process,u=c&&c.versions,s=u&&u.v8;s?o=(r=s.split("."))[0]+r[1]:a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(o=r[1]),t.exports=o&&+o},function(t,e,n){var r=n(20),o=n(53);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},function(t,e,n){var r=n(24),o=n(36),i=n(16),a=n(18),c=n(58),u=[].push,s=function(t){var e=1==t,n=2==t,s=3==t,l=4==t,f=6==t,p=5==t||f;return function(d,h,v,y){for(var m,_,g=i(d),b=o(g),S=r(h,v,3),w=a(b.length),E=0,x=y||c,k=e?x(d,w):n?x(d,0):void 0;w>E;E++)if((p||E in b)&&(_=S(m=b[E],E,g),t))if(e)k[E]=_;else if(_)switch(t){case 3:return!0;case 5:return m;case 6:return E;case 2:u.call(k,m)}else if(l)return!1;return f?-1:s||l?l:k}};t.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6)}},function(t,e,n){var r=n(13);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(3);t.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(t,e,n){"use strict";var r=n(3);t.exports=function(t,e){var n=[][t];return!!n&&r((function(){n.call(null,e||function(){throw 1},1)}))}},function(t,e,n){var r=n(42),o=n(14),i=n(94);r||o(Object.prototype,"toString",i,{unsafe:!0})},function(t,e,n){"use strict";var r,o,i,a,c=n(5),u=n(20),s=n(0),l=n(15),f=n(95),p=n(14),d=n(96),h=n(34),v=n(97),y=n(6),m=n(21),_=n(98),g=n(13),b=n(39),S=n(99),w=n(65),E=n(100),x=n(66).set,k=n(101),O=n(102),I=n(103),L=n(70),T=n(104),j=n(30),A=n(56),C=n(1),N=n(43),P=C("species"),M="Promise",R=j.get,B=j.set,D=j.getterFor(M),q=f,F=s.TypeError,U=s.document,G=s.process,H=l("fetch"),V=L.f,W=V,Y="process"==g(G),J=!!(U&&U.createEvent&&s.dispatchEvent),K=A(M,(function(){if(!(b(q)!==String(q))){if(66===N)return!0;if(!Y&&"function"!=typeof PromiseRejectionEvent)return!0}if(u&&!q.prototype.finally)return!0;if(N>=51&&/native code/.test(q))return!1;var t=q.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[P]=e,!(t.then((function(){}))instanceof e)})),z=K||!w((function(t){q.all(t).catch((function(){}))})),Q=function(t){var e;return!(!y(t)||"function"!=typeof(e=t.then))&&e},X=function(t,e,n){if(!e.notified){e.notified=!0;var r=e.reactions;k((function(){for(var o=e.value,i=1==e.state,a=0;r.length>a;){var c,u,s,l=r[a++],f=i?l.ok:l.fail,p=l.resolve,d=l.reject,h=l.domain;try{f?(i||(2===e.rejection&&et(t,e),e.rejection=1),!0===f?c=o:(h&&h.enter(),c=f(o),h&&(h.exit(),s=!0)),c===l.promise?d(F("Promise-chain cycle")):(u=Q(c))?u.call(c,p,d):p(c)):d(o)}catch(t){h&&!s&&h.exit(),d(t)}}e.reactions=[],e.notified=!1,n&&!e.rejection&&$(t,e)}))}},Z=function(t,e,n){var r,o;J?((r=U.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),s.dispatchEvent(r)):r={promise:e,reason:n},(o=s["on"+t])?o(r):"unhandledrejection"===t&&I("Unhandled promise rejection",n)},$=function(t,e){x.call(s,(function(){var n,r=e.value;if(tt(e)&&(n=T((function(){Y?G.emit("unhandledRejection",r,t):Z("unhandledrejection",t,r)})),e.rejection=Y||tt(e)?2:1,n.error))throw n.value}))},tt=function(t){return 1!==t.rejection&&!t.parent},et=function(t,e){x.call(s,(function(){Y?G.emit("rejectionHandled",t):Z("rejectionhandled",t,e.value)}))},nt=function(t,e,n,r){return function(o){t(e,n,o,r)}},rt=function(t,e,n,r){e.done||(e.done=!0,r&&(e=r),e.value=n,e.state=2,X(t,e,!0))},ot=function(t,e,n,r){if(!e.done){e.done=!0,r&&(e=r);try{if(t===n)throw F("Promise can't be resolved itself");var o=Q(n);o?k((function(){var r={done:!1};try{o.call(n,nt(ot,t,r,e),nt(rt,t,r,e))}catch(n){rt(t,r,n,e)}})):(e.value=n,e.state=1,X(t,e,!1))}catch(n){rt(t,{done:!1},n,e)}}};K&&(q=function(t){_(this,q,M),m(t),r.call(this);var e=R(this);try{t(nt(ot,this,e),nt(rt,this,e))}catch(t){rt(this,e,t)}},(r=function(t){B(this,{type:M,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=d(q.prototype,{then:function(t,e){var n=D(this),r=V(E(this,q));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=Y?G.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&X(this,n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,e=R(t);this.promise=t,this.resolve=nt(ot,t,e),this.reject=nt(rt,t,e)},L.f=V=function(t){return t===q||t===i?new o(t):W(t)},u||"function"!=typeof f||(a=f.prototype.then,p(f.prototype,"then",(function(t,e){var n=this;return new q((function(t,e){a.call(n,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof H&&c({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return O(q,H.apply(s,arguments))}}))),c({global:!0,wrap:!0,forced:K},{Promise:q}),h(q,M,!1,!0),v(M),i=l(M),c({target:M,stat:!0,forced:K},{reject:function(t){var e=V(this);return e.reject.call(void 0,t),e.promise}}),c({target:M,stat:!0,forced:u||K},{resolve:function(t){return O(u&&this===i?q:this,t)}}),c({target:M,stat:!0,forced:z},{all:function(t){var e=this,n=V(e),r=n.resolve,o=n.reject,i=T((function(){var n=m(e.resolve),i=[],a=0,c=1;S(t,(function(t){var u=a++,s=!1;i.push(void 0),c++,n.call(e,t).then((function(t){s||(s=!0,i[u]=t,--c||r(i))}),o)})),--c||r(i)}));return i.error&&o(i.value),n.promise},race:function(t){var e=this,n=V(e),r=n.reject,o=T((function(){var o=m(e.resolve);S(t,(function(t){o.call(e,t).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}})},function(t,e,n){var r=n(8),o=n(3),i=n(37);t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(0),o=n(38),i=r["__core-js_shared__"]||o("__core-js_shared__",{});t.exports=i},function(t,e,n){var r=n(55),o=n(41).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){var r=n(4),o=n(17),i=n(89).indexOf,a=n(32);t.exports=function(t,e){var n,c=o(t),u=0,s=[];for(n in c)!r(a,n)&&r(c,n)&&s.push(n);for(;e.length>u;)r(c,n=e[u++])&&(~i(s,n)||s.push(n));return s}},function(t,e,n){var r=n(3),o=/#|\.prototype\./,i=function(t,e){var n=c[a(t)];return n==s||n!=u&&("function"==typeof e?r(e):!!e)},a=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},c=i.data={},u=i.NATIVE="N",s=i.POLYFILL="P";t.exports=i},function(t,e,n){"use strict";var r=n(46).forEach,o=n(49),i=n(59),a=o("forEach"),c=i("forEach");t.exports=a&&c?[].forEach:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}},function(t,e,n){var r=n(6),o=n(47),i=n(1)("species");t.exports=function(t,e){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)?r(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},function(t,e,n){var r=n(8),o=n(3),i=n(4),a=Object.defineProperty,c={},u=function(t){throw t};t.exports=function(t,e){if(i(c,t))return c[t];e||(e={});var n=[][t],s=!!i(e,"ACCESSORS")&&e.ACCESSORS,l=i(e,0)?e[0]:u,f=i(e,1)?e[1]:void 0;return c[t]=!!n&&!o((function(){if(s&&!r)return!0;var t={length:-1};s?a(t,1,{enumerable:!0,get:u}):t[1]=1,n.call(t,l,f)}))}},function(t,e,n){var r=n(7);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&r(i.call(t)),e}}},function(t,e,n){var r=n(1),o=n(25),i=r("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)}},function(t,e,n){"use strict";var r=n(29),o=n(9),i=n(19);t.exports=function(t,e,n){var a=r(e);a in t?o.f(t,a,i(0,n)):t[a]=n}},function(t,e,n){var r=n(64),o=n(25),i=n(1)("iterator");t.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,e,n){var r=n(42),o=n(13),i=n(1)("toStringTag"),a="Arguments"==o(function(){return arguments}());t.exports=r?o:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:a?o(e):"Object"==(r=o(e))&&"function"==typeof e.callee?"Arguments":r}},function(t,e,n){var r=n(1)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i={};i[r]=function(){return{next:function(){return{done:n=!0}}}},t(i)}catch(t){}return n}},function(t,e,n){var r,o,i,a=n(0),c=n(3),u=n(13),s=n(24),l=n(67),f=n(37),p=n(68),d=a.location,h=a.setImmediate,v=a.clearImmediate,y=a.process,m=a.MessageChannel,_=a.Dispatch,g=0,b={},S=function(t){if(b.hasOwnProperty(t)){var e=b[t];delete b[t],e()}},w=function(t){return function(){S(t)}},E=function(t){S(t.data)},x=function(t){a.postMessage(t+"",d.protocol+"//"+d.host)};h&&v||(h=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return b[++g]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},r(g),g},v=function(t){delete b[t]},"process"==u(y)?r=function(t){y.nextTick(w(t))}:_&&_.now?r=function(t){_.now(w(t))}:m&&!p?(i=(o=new m).port2,o.port1.onmessage=E,r=s(i.postMessage,i,1)):!a.addEventListener||"function"!=typeof postMessage||a.importScripts||c(x)||"file:"===d.protocol?r="onreadystatechange"in f("script")?function(t){l.appendChild(f("script")).onreadystatechange=function(){l.removeChild(this),S(t)}}:function(t){setTimeout(w(t),0)}:(r=x,a.addEventListener("message",E,!1))),t.exports={set:h,clear:v}},function(t,e,n){var r=n(15);t.exports=r("document","documentElement")},function(t,e,n){var r=n(69);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},function(t,e,n){var r=n(15);t.exports=r("navigator","userAgent")||""},function(t,e,n){"use strict";var r=n(21),o=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new o(t)}},function(t,e,n){"use strict";var r,o,i,a=n(72),c=n(12),u=n(4),s=n(1),l=n(20),f=s("iterator"),p=!1;[].keys&&("next"in(i=[].keys())?(o=a(a(i)))!==Object.prototype&&(r=o):p=!0),null==r&&(r={}),l||u(r,f)||c(r,f,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:p}},function(t,e,n){var r=n(4),o=n(16),i=n(31),a=n(109),c=i("IE_PROTO"),u=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=o(t),r(t,c)?t[c]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,n){var r,o=n(7),i=n(110),a=n(41),c=n(32),u=n(67),s=n(37),l=n(31),f=l("IE_PROTO"),p=function(){},d=function(t){return"<script>"+t+"<\/script>"},h=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;h=r?function(t){t.write(d("")),t.close();var e=t.parentWindow.Object;return t=null,e}(r):((e=s("iframe")).style.display="none",u.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(d("document.F=Object")),t.close(),t.F);for(var n=a.length;n--;)delete h.prototype[a[n]];return h()};c[f]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(p.prototype=o(t),n=new p,p.prototype=null,n[f]=t):n=h(),void 0===e?n:i(n,e)}},function(t,e,n){var r=n(55),o=n(41);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e,n){"use strict";var r=n(5),o=n(3),i=n(47),a=n(6),c=n(16),u=n(18),s=n(62),l=n(58),f=n(85),p=n(1),d=n(43),h=p("isConcatSpreadable"),v=d>=51||!o((function(){var t=[];return t[h]=!1,t.concat()[0]!==t})),y=f("concat"),m=function(t){if(!a(t))return!1;var e=t[h];return void 0!==e?!!e:i(t)};r({target:"Array",proto:!0,forced:!v||!y},{concat:function(t){var e,n,r,o,i,a=c(this),f=l(a,0),p=0;for(e=-1,r=arguments.length;e<r;e++)if(m(i=-1===e?a:arguments[e])){if(p+(o=u(i.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(n=0;n<o;n++,p++)n in i&&s(f,p,i[n])}else{if(p>=9007199254740991)throw TypeError("Maximum allowed index exceeded");s(f,p++,i)}return f.length=p,f}})},function(t,e,n){"use strict";n(27),n(33);function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._burgerElement=document.querySelector(".header__logo-navicon"),this._setHandlers()}var e,n,o;return e=t,(n=[{key:"_setHandlers",value:function(){this._burgerElement.addEventListener("click",this._showMobileMenu.bind(this))}},{key:"_showMobileMenu",value:function(){document.querySelector(".header__logo-navicon").classList.toggle("header__logo-navicon_mop"),document.querySelector(".header").classList.toggle("header_mop"),document.querySelector(".header__logo").classList.toggle("header__logo_mop"),document.querySelector(".header__logo-txt").classList.toggle("header__logo-txt_mop"),document.querySelector(".header__menu").classList.toggle("header__menu_mop"),document.querySelectorAll(".header__menu-item").forEach((function(t){return t.classList.toggle("header__menu-item_mop")}));var t=document.querySelector(".search__title"),e=document.querySelector(".statistics__title");t?t.classList.toggle("search__title_mop"):e&&e.classList.toggle("statistics__title_mop")}}])&&r(e.prototype,n),o&&r(e,o),t}();e.a=o},function(t,e,n){"use strict";var r=n(26);function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var i=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._props=n,this._isMain=e,this._mainBtn=document.getElementById("nav-main"),this._newsBtn=document.getElementById("nav-news"),this._authBtn=document.getElementById("nav-auth"),this.render(n),this._setHandlers()}var e,n,i;return e=t,(n=[{key:"_setHandlers",value:function(){this._authBtn.addEventListener("click",this._auth.bind(this))}},{key:"_auth",value:function(){this._props?this._props.isLoggedIn&&(localStorage.removeItem("props"),location.href="index.html"):(new r.a).open()}},{key:"render",value:function(t){this._isMain?(this._mainBtn.classList.add("header__menu-link_selected"),this._newsBtn.classList.remove("header__menu-link_selected")):(this._mainBtn.classList.remove("header__menu-link_selected"),this._newsBtn.classList.add("header__menu-link_selected")),t&&(t.isLoggedIn?(this._newsBtn.parentElement.classList.remove("header__menu-item_hidden"),this._authBtn.textContent=t.userName,this._authBtn.classList.add("header__menu-link_button_logout")):(this._newsBtn.parentElement.classList.add("header__menu-item_hidden"),this._authBtn.classList.remove("header__menu-link_button_logout")))}}])&&o(e.prototype,n),i&&o(e,i),t}();e.a=i},function(t,e,n){"use strict";var r=n(35),o=n(22),i=n(10),a=n(26);function c(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function u(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var s=function(){function t(e,n,r,o,i,a,u){var s=arguments.length>7&&void 0!==arguments[7]?arguments[7]:"";c(this,t),this._sourceName=e,this._title=n,this._description=r,this._url=o,this._urlToImage=i,this._publishedAt=a,this._keyword=u,this._cardId=s}var e,n,s;return e=t,(n=[{key:"getCardElement",value:function(){var t=document.querySelector('[data-component="card"]').content.cloneNode(!0),e=t.querySelector(".news-card"),n=e.querySelector(".news-card__title"),i=e.querySelector(".news-card__txt"),c=e.querySelector(".news-card__image"),u=e.querySelector(".news-card__date"),s=e.querySelector(".news-card__media"),l=e.querySelector(".news-card__url");n.textContent=this._title.substring(0,30)+"...",i.textContent=this._description.substring(0,200)+"...",c.style.backgroundImage="url(".concat(this._urlToImage,")"),u.textContent=Object(r.a)(this._publishedAt),s.textContent=this._sourceName,l.href=this._url;var f=e.querySelector(".news-card__save-icon");return f?(f.dataset.cardId=this._cardId,""!==this._cardId&&f.classList.add("news-card__save-icon_saved"),Object(o.b)()?f.addEventListener("click",this._markCard.bind(this)):(f.addEventListener("click",(function(){(new a.a).open()})),f.classList.remove("news-card__save-icon_saved")),f.addEventListener("mouseover",this._renderIcon.bind(this)),f.addEventListener("mouseout",this._clearTooltip.bind(this))):(e.querySelector(".news-card__tag").textContent=this._keyword,this._parentContainer=e,(f=e.querySelector(".news-card__delete-icon")).dataset.cardId=this._cardId,f.addEventListener("click",this._deleteCard.bind(this))),t}},{key:"_renderIcon",value:function(t){var e=t.target.parentElement.querySelector(".news-card__tooltip-text");Object(o.b)()?e.style.display="none":e.style.display="inline"}},{key:"_deleteCard",value:function(){var t=this,e=event.target,n=new i.a;""!==e.dataset.cardId&&n.removeArticle(e.dataset.cardId).then((function(){e.dataset.cardId="",document.querySelector(".search__results-list-cards-portion").removeChild(t._parentContainer),location.reload()})).catch((function(t){console.log(t)}))}},{key:"_clearTooltip",value:function(t){t.target.parentElement.querySelector(".news-card__tooltip-text").style.display="none"}},{key:"_markCard",value:function(t){var e=t.target,n=new i.a;""!==e.dataset.cardId?n.removeArticle(e.dataset.cardId).then((function(){e.dataset.cardId="",e.classList.remove("news-card__save-icon_saved")})).catch((function(t){console.log(t)})):n.createArticle(this._keyword,this._title,this._description,this._publishedAt,this._sourceName,this._url,this._urlToImage).then((function(t){e.dataset.cardId=t.data._id,e.classList.add("news-card__save-icon_saved")})).catch((function(t){console.log(t)}))}}])&&u(e.prototype,n),s&&u(e,s),t}();e.a=s},function(t,e,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:r},function(t,e,n){var r=n(4),o=n(88),i=n(28),a=n(9);t.exports=function(t,e){for(var n=o(e),c=a.f,u=i.f,s=0;s<n.length;s++){var l=n[s];r(t,l)||c(t,l,u(e,l))}}},function(t,e,n){var r=n(0);t.exports=r},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(48);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,n){var r=n(8),o=n(9).f,i=Function.prototype,a=i.toString,c=/^\s*function ([^ (]*)/;r&&!("name"in i)&&o(i,"name",{configurable:!0,get:function(){try{return a.call(this).match(c)[1]}catch(t){return""}}})},function(t,e,n){var r=n(3),o=n(1),i=n(43),a=o("species");t.exports=function(t){return i>=51||!r((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(0),o=n(39),i=r.WeakMap;t.exports="function"==typeof i&&/native code/.test(o(i))},function(t,e,n){var r=n(15),o=n(54),i=n(82),a=n(7);t.exports=r("Reflect","ownKeys")||function(t){var e=o.f(a(t)),n=i.f;return n?e.concat(n(t)):e}},function(t,e,n){var r=n(17),o=n(18),i=n(90),a=function(t){return function(e,n,a){var c,u=r(e),s=o(u.length),l=i(a,s);if(t&&n!=n){for(;s>l;)if((c=u[l++])!=c)return!0}else for(;s>l;l++)if((t||l in u)&&u[l]===n)return t||l||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},function(t,e,n){var r=n(40),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,n){var r=n(5),o=n(93);r({target:"Array",stat:!0,forced:!n(65)((function(t){Array.from(t)}))},{from:o})},function(t,e,n){"use strict";var r=n(24),o=n(16),i=n(60),a=n(61),c=n(18),u=n(62),s=n(63);t.exports=function(t){var e,n,l,f,p,d,h=o(t),v="function"==typeof this?this:Array,y=arguments.length,m=y>1?arguments[1]:void 0,_=void 0!==m,g=s(h),b=0;if(_&&(m=r(m,y>2?arguments[2]:void 0,2)),null==g||v==Array&&a(g))for(n=new v(e=c(h.length));e>b;b++)d=_?m(h[b],b):h[b],u(n,b,d);else for(p=(f=g.call(h)).next,n=new v;!(l=p.call(f)).done;b++)d=_?i(f,m,[l.value,b],!0):l.value,u(n,b,d);return n.length=b,n}},function(t,e,n){"use strict";var r=n(42),o=n(64);t.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},function(t,e,n){var r=n(0);t.exports=r.Promise},function(t,e,n){var r=n(14);t.exports=function(t,e,n){for(var o in e)r(t,o,e[o],n);return t}},function(t,e,n){"use strict";var r=n(15),o=n(9),i=n(1),a=n(8),c=i("species");t.exports=function(t){var e=r(t),n=o.f;a&&e&&!e[c]&&n(e,c,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},function(t,e,n){var r=n(7),o=n(61),i=n(18),a=n(24),c=n(63),u=n(60),s=function(t,e){this.stopped=t,this.result=e};(t.exports=function(t,e,n,l,f){var p,d,h,v,y,m,_,g=a(e,n,l?2:1);if(f)p=t;else{if("function"!=typeof(d=c(t)))throw TypeError("Target is not iterable");if(o(d)){for(h=0,v=i(t.length);v>h;h++)if((y=l?g(r(_=t[h])[0],_[1]):g(t[h]))&&y instanceof s)return y;return new s(!1)}p=d.call(t)}for(m=p.next;!(_=m.call(p)).done;)if("object"==typeof(y=u(p,g,_.value,l))&&y&&y instanceof s)return y;return new s(!1)}).stop=function(t){return new s(!0,t)}},function(t,e,n){var r=n(7),o=n(21),i=n(1)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||null==(n=r(a)[i])?e:o(n)}},function(t,e,n){var r,o,i,a,c,u,s,l,f=n(0),p=n(28).f,d=n(13),h=n(66).set,v=n(68),y=f.MutationObserver||f.WebKitMutationObserver,m=f.process,_=f.Promise,g="process"==d(m),b=p(f,"queueMicrotask"),S=b&&b.value;S||(r=function(){var t,e;for(g&&(t=m.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?a():i=void 0,t}}i=void 0,t&&t.enter()},g?a=function(){m.nextTick(r)}:y&&!v?(c=!0,u=document.createTextNode(""),new y(r).observe(u,{characterData:!0}),a=function(){u.data=c=!c}):_&&_.resolve?(s=_.resolve(void 0),l=s.then,a=function(){l.call(s,r)}):a=function(){h.call(f,r)}),t.exports=S||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,a()),i=e}},function(t,e,n){var r=n(7),o=n(6),i=n(70);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){var r=n(0);t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,n){"use strict";var r=n(106).charAt,o=n(30),i=n(107),a=o.set,c=o.getterFor("String Iterator");i(String,"String",(function(t){a(this,{type:"String Iterator",string:String(t),index:0})}),(function(){var t,e=c(this),n=e.string,o=e.index;return o>=n.length?{value:void 0,done:!0}:(t=r(n,o),e.index+=t.length,{value:t,done:!1})}))},function(t,e,n){var r=n(40),o=n(23),i=function(t){return function(e,n){var i,a,c=String(o(e)),u=r(n),s=c.length;return u<0||u>=s?t?"":void 0:(i=c.charCodeAt(u))<55296||i>56319||u+1===s||(a=c.charCodeAt(u+1))<56320||a>57343?t?c.charAt(u):i:t?c.slice(u,u+2):a-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},function(t,e,n){"use strict";var r=n(5),o=n(108),i=n(72),a=n(111),c=n(34),u=n(12),s=n(14),l=n(1),f=n(20),p=n(25),d=n(71),h=d.IteratorPrototype,v=d.BUGGY_SAFARI_ITERATORS,y=l("iterator"),m=function(){return this};t.exports=function(t,e,n,l,d,_,g){o(n,e,l);var b,S,w,E=function(t){if(t===d&&L)return L;if(!v&&t in O)return O[t];switch(t){case"keys":case"values":case"entries":return function(){return new n(this,t)}}return function(){return new n(this)}},x=e+" Iterator",k=!1,O=t.prototype,I=O[y]||O["@@iterator"]||d&&O[d],L=!v&&I||E(d),T="Array"==e&&O.entries||I;if(T&&(b=i(T.call(new t)),h!==Object.prototype&&b.next&&(f||i(b)===h||(a?a(b,h):"function"!=typeof b[y]&&u(b,y,m)),c(b,x,!0,!0),f&&(p[x]=m))),"values"==d&&I&&"values"!==I.name&&(k=!0,L=function(){return I.call(this)}),f&&!g||O[y]===L||u(O,y,L),p[e]=L,d)if(S={values:E("values"),keys:_?L:E("keys"),entries:E("entries")},g)for(w in S)(v||k||!(w in O))&&s(O,w,S[w]);else r({target:e,proto:!0,forced:v||k},S);return S}},function(t,e,n){"use strict";var r=n(71).IteratorPrototype,o=n(73),i=n(19),a=n(34),c=n(25),u=function(){return this};t.exports=function(t,e,n){var s=e+" Iterator";return t.prototype=o(r,{next:i(1,n)}),a(t,s,!1,!0),c[s]=u,t}},function(t,e,n){var r=n(3);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,n){var r=n(8),o=n(9),i=n(7),a=n(74);t.exports=r?Object.defineProperties:function(t,e){i(t);for(var n,r=a(e),c=r.length,u=0;c>u;)o.f(t,n=r[u++],e[n]);return t}},function(t,e,n){var r=n(7),o=n(112);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(t){}return function(n,i){return r(n),o(i),e?t.call(n,i):n.__proto__=i,n}}():void 0)},function(t,e,n){var r=n(6);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,e,n){"use strict";var r=n(5),o=n(114);r({target:"String",proto:!0,forced:n(115)("link")},{link:function(t){return o(this,"a","href",t)}})},function(t,e,n){var r=n(23),o=/"/g;t.exports=function(t,e,n,i){var a=String(r(t)),c="<"+e;return""!==n&&(c+=" "+n+'="'+String(i).replace(o,"&quot;")+'"'),c+">"+a+"</"+e+">"}},function(t,e,n){var r=n(3);t.exports=function(t){return r((function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}))}},function(t,e,n){"use strict";var r=n(5),o=n(36),i=n(17),a=n(49),c=[].join,u=o!=Object,s=a("join",",");r({target:"Array",proto:!0,forced:u||!s},{join:function(t){return c.call(i(this),void 0===t?",":t)}})},,,function(t,e,n){},,,,,,,,function(t,e,n){n(132),t.exports=n(119)},function(t,e,n){"use strict";var r=n(5),o=n(46).map,i=n(85),a=n(59),c=i("map"),u=a("map");r({target:"Array",proto:!0,forced:!c||!u},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){"use strict";var r=n(5),o=n(21),i=n(16),a=n(3),c=n(49),u=[],s=u.sort,l=a((function(){u.sort(void 0)})),f=a((function(){u.sort(null)})),p=c("sort");r({target:"Array",proto:!0,forced:l||!f||!p},{sort:function(t){return void 0===t?s.call(i(this)):s.call(i(this),o(t))}})},function(t,e,n){var r=n(5),o=n(16),i=n(74);r({target:"Object",stat:!0,forced:n(3)((function(){i(1)}))},{keys:function(t){return i(o(t))}})},,function(t,e,n){"use strict";n.r(e);n(119);var r=n(22),o=n(76),i=n(77),a=(n(75),n(27),n(128),n(129),n(130),n(33),n(10));function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var u=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._userName=e,this._render()}var e,n,r;return e=t,(n=[{key:"_render",value:function(){var t=this,e=document.querySelector(".statistics__greetings"),n=document.querySelector(".statistics__label");(new a.a).getArticles().then((function(r){var o=r.length;e.textContent="".concat(t._userName,", у вас ").concat(o," сохраненных статей");var i=t._getSortedKeywords(r),a=t._formatTags(i),c="По ключевым словам: ".concat(a);n.innerHTML=c})).catch((function(t){console.log(t)}))}},{key:"_formatTags",value:function(t){if(0===t.length)return"";if(t.length>3){var e=t[0][0],n=t[1][0],r=t.length-2;return'<span class="bold">'.concat(e,'</span>, <span class="bold">').concat(n,'</span>, и <span class="bold">').concat(r,"</span> другим")}for(var o="",i=0;i<t.length;i++)o+='<span class="bold">'.concat(t[i][0],"</span> ");return o}},{key:"_getSortedKeywords",value:function(t){var e={};t.forEach((function(t){void 0!==e[t.keyword]?e[t.keyword]+=1:e[t.keyword]=1}));var n=Object.keys(e).map((function(t){return[t,e[t]]}));return n.sort((function(t,e){return e[1]-t[1]})),n}}])&&c(e.prototype,n),r&&c(e,r),t}();n(113);function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var l=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._searchResults=document.querySelector(".search__results-list"),this._cardsContainer=document.querySelector(".search__results-list-cards-portion"),this._cards=[]}var e,n,r;return e=t,(n=[{key:"renderResults",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(this._cards=t,this._clearResults(),0!==this._cards.length){for(var e=0;e<this._cards.length;e++)this.addCard(this._cards[e]);this._searchResults.style.display="block"}else this._searchResults.style.display="none"}},{key:"addCard",value:function(t){this._cardsContainer.appendChild(t.getCardElement())}},{key:"_clearResults",value:function(){for(;this._cardsContainer.lastElementChild;)this._cardsContainer.removeChild(this._cardsContainer.lastElementChild)}}])&&s(e.prototype,n),r&&s(e,r),t}(),f=n(78);function p(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var d=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._render()}var e,n,r;return e=t,(n=[{key:"_render",value:function(){var t=this;(new a.a).getArticles().then((function(e){var n=t._createCardsArray(e);(new l).renderResults(n)})).catch((function(t){console.log(t)}))}},{key:"_createCardsArray",value:function(t){if(0===t.length)return[];var e=[];return t.forEach((function(t){e.push(new f.a(t.source,t.title,t.text,t.link,t.image,t.date,t.keyword,t._id))})),e}}])&&p(e.prototype,n),r&&p(e,r),t}();Object(r.b)()?(new o.a,new i.a(!1,JSON.parse(localStorage.getItem("props"))),new u(Object(r.a)()),new d):location.href="index.html"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,